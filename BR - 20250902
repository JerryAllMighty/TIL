[서두]
- 신규 기능 개발 오픈이 다가왔다. 예전에 한 번 이슈가 있었던 적이 있던 게(아래에 간략하게 경험담 적어놨다),
프론트/앱 개발은 API가 기존에 사용하던 것이 바뀌거나, 혹은 신규로 개발이 된다던가 식의 변경이 있다면
새로 스키마를 만들던가 식의 추가 개발이 이루어져야한다. (당연하다)
- 하지만 최종 반영시에 해당하는 부분이 문제가 없으려면 경우에 따라서는 프론트가 먼저 개발을 진행하고, 
어떨 때는 백엔드 API가 먼저 반영되어야하는 경우도 있다.
그래서 오늘은 해당하는 운영 배포 전략을 지칭하는 용어나 개념들은 어떤 것들이 있는지 조금 알아보고, 
실제 업무에 적용시킬 수 있는 건 또 어떤 게 있을지 한 번 정리해보려고한다.

> [이전 경험담 공유]
>> 7월달 기능 개발 후, 이슈가 생겨서 해당 회고록을 남겨놓았던 부분이 보인다. 가져왔다.
(디테일한 상황은 남겨놓지 않았네...)

# 운영 업무 시 기능 개발을 할 때
새로운 신규 기능 개발이면 모르지만, 기존의 기능을 변경하는 일이라면, 우선 가장 먼저 이 API를 따로 분리해서 추가하는 식으로 개발하자.
왜냐하면 기존의 API가 프론트와 같이 개발되어야하는 케이스가 많을텐데,
이런 케이스의 경우는 프론트의 개발건이 충분히 검증이나 테스트 완료되지 않은 상태에서 백엔드 API가 검증이나 운영에 반영될 요소가 있기 때문에,
또한 테스트가 덜 된 상태에서 다른 분의 개발이 긴급 반영을 해야하는 케이스 생기니, 꼭, 기능 개발을 할 때는 카나리아 배포를 우선 고려해보자.

>> 이 때 프론트 개발 반영 여부를 고려하지 않고 백엔드 반영 여부만 덜컥 OK를 해버려서 이런 사단이 나버렸다.
프론트는 미리 공유 못 드려서 죄송하다하고, 나는 프론트 개발 확인 못했으니 책임 소재를 물었다.
>> 그리고 지금 보니 카나리아 배포를 잘못 이해하고 적은 것 같다. 
일부 트래픽을 조정해서 일부에게만 새 버전을 사용하게 하는 것인데, 이 때 나는 잘못된 정보를 접해서 오해를 해서 적은 부분 같다.
내가 적은 부분은 백엔드와 프론트 배포 시점이 다를 때 서비스가 깨지지 않게하는 전략을 생각하는 것이었고,
>>> Backward Compatible Deployment (하위 호환 배포)
>>> API Versioning
>>> Graceful Migration (점진적 전환)
>>> Consumer-Driven Contracts
이 정도를 이해하고 적었으면 될 것 같다.....

>> 결론 : 둘 다 힘들었다. 

[본론]
🔑 안정적인 배포 전략들
1. Blue-Green Deployment (블루-그린 배포)
개념: 두 개의 동일한 운영 환경(Blue = 현재 서비스, Green = 새 버전)을 준비.
새 버전을 Green에 배포 → 테스트 완료 → 트래픽을 Green으로 전환.
장점: 롤백이 즉시 가능 (다시 Blue로 전환).
단점: 인프라 비용이 2배 필요.

2. Canary Release (카나리 배포)
개념: 새 버전을 일부 사용자에게만 먼저 배포 → 문제가 없으면 점차 전체로 확대.
장점: 실사용자 환경에서 안정성 확인 가능. 장애 발생 시 영향 최소화.
단점: 모니터링 체계가 반드시 필요.

3. Rolling Update (롤링 업데이트)
개념: 서버를 하나씩 순차적으로 새 버전으로 교체.
장점: 무중단 서비스 가능. 인프라 비용 Blue-Green보다 적음.
단점: 중간에 문제 생기면 절반은 구버전, 절반은 신버전이 되는 상황 발생 가능.

4. Feature Toggle (기능 토글, Feature Flag)
개념: 기능 코드를 미리 배포하되, 실제 노출 여부는 설정(토글)으로 제어.
이벤트 같은 경우 → API/백엔드는 미리 반영하고, 프론트에서 토글 켜는 순간 기능 오픈.
장점: 배포와 릴리즈를 분리할 수 있음. 롤백도 “토글 끔”으로 해결 가능.
단점: 토글 관리 복잡성, 오래된 토글을 안 지우면 기술 부채 됨.

5. Shadow Deployment (섀도우 배포)
개념: 실제 사용자 요청을 복제해서 새 버전에 보내지만, 응답은 버려짐(사용자에겐 구버전 응답만 전달).
장점: 실제 트래픽 기반 안정성 테스트 가능.
단점: 인프라 비용/운영 복잡성 증가.

6. A/B Testing (실험적 배포)
개념: 서로 다른 버전을 일부 사용자 그룹에 배포해 성능/반응 비교.
장점: 실험과 배포를 동시에. 마케팅 이벤트와 잘 어울림.
단점: 코드/데이터 분기 관리가 복잡.

[결론]
