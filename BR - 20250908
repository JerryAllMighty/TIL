[서두]
- 신규 기능 개발을 진행하다보니 설계 원칙에 대한 고민이 많이드는 걸 알아차리고, 
어떤 고민을 많이했는지 정리하고, 그걸 바탕으로 베스트 프랙티스는 뭔지 정리해보는 게 좋다고 생각했다. 
- 상위 도메인 A와 그의 자식 B, 그리고 그의 자식 C가 있다. 
만약 해당 데이터를 적재한다고 생각하면, 어떠한 방식으로 적재를 할 지, 고민하며, 다시 새로 로직을 또 짜고 하느라 시간을 좀 잡아먹었다. 
기존에는 등록하는 로직이라면, 
예외처리 > 비즈니스 로직  > 등록의 방식으로 진행하여 깔끔하게 관리를 했었다고 생각했는데, 자식 테이블을 타고 들어가다보니 고민하는 부분이 생겼다.
한 메서드 안에서
A 예외처리 > A 비즈니스 로직 > A 등록 > B 예외처리 > B 비즈니스 로직 > B의 로직에 따라 특정한 경우에만 등록되는 자식 C를 적재 (항상 적재되는 친구가 아님) > B 적재
의 순서가 되어버려 기존의 코드를 관리하는 순서도 맞지 않거니와, Auto Increment를 사용하여 PK 값을 모두 관리하는 데이터 테이블들이라, 
'B의 로직에 따라 특정한 경우에만 등록되는 자식 C를 적재' 하는 부분에서 C가 B가 적재되고 난 후의 Seq를 가지고 데이터가 저장되어야하지않아 문제가 생겼다.
앞에서 B의 비즈니스 로직을 처리함에 따라 B의 예외처리를 진행하면서 비즈니스 로직을 같이 처리하면서 타고 들어간 분기에서 C를 적재하는 모양꼴이 되어버려, 
뒤에 B가 적재되고 난 후 생겨나는 B의 Seq 값을 C에 적재할 수 없으니, 아다리가 맞지않아 고민에 빠졌다. 

[본론]
- 적용할만한 설계 원칙
> C를 바로 적재하지 말고, 분기에 따라 적재할지 말지 그 여부만 결정 (트랜잭션 경계 일관성 유지)
>> 실제로 먼저 고민했던 부부인다. boolean 값으로 B의 로직을 분기처리할 때, 
C가 적재될지 여부가 결정되면 해당 부분을 boolean 값에다가 저장 후, 나중에 B가 적재되고 나면 그 때 적재를 하려고 생각했다.
>> 해당 부분은 한 메서드 안에서 조건이라 로직이 너무 길어진다고 생각했고, 
또 분기가 많아지다보니 나중에 수정 등의 사항이 생기거나, 혹은 버그가 생기면 어떠한 부분이 적재되고 안 적재되는지 작업자가 아닌 이상 파악하기 계속 어려워질 것이라고 생각했다.

> 도메인 모델에 등록 책임을 몰아준다. Aggregate Root / 책임 위임 (DDD 개념)/ 도메인 계층 책임 분리
>> 서비스단을 분리하여 A는 B를 호출 > B는 C를 호출하는 방식. 
>> 응집도 ↑, 결합도 ↓
>> 책임을 위임하여 등록 책임이 분산, 각각의 도메인은 호출하는 자식만 등록 책임

[결론]
- 한 메서드 안에서 로직이 복잡해지기 시작해서, 트랜잭션 일관성이 무너진다면
> 경계 일관성은 유지하는 것이 가독성과 디버깅에 용이하니 유지하는 쪽으로
> 대신 도메인 계층 책임 분리를 생각해보자
> 오늘처럼 서비스단으로 여러번 나누면 의도한 로직 흐름을 가지고 가면서, 등록 책임 소재도 더 잘 관리할 수 있다.
