[서두]
요즘 ,신규 구축한 프로젝트를 운영으로 전환한 후, 신규 기능 개발 등을 진행하며 느낀 점은, 
'조금씩 큰 그림이 머리에 축적되기 시작했다는 것'
그리고 그 큰 그림 위에 세부적으로 고려해야하는 부분, 디테일들이 쌓이는 느낌이라, 
어떻게 보면 단순해보이는 CRUD 도 점점 더 머릿속에서 정리가 되면서 조금씩 완성도가 높아지는 느낌을 받는다.

우선 가장 큰 소득은, 테스트의 큰 틀을 직접 그릴 수 있다는 것이다. 
단순히 어디에나 있을법한 테스트 절차라고 생각할지도 모르는데,
난 이걸 수행하지 않거나 미흡하게 수행하여
**고생한** 경험을 가지고 있다는 점에서 다르다.
개발자는 이게 무슨 의미인지 느낄 것이라 생각한다.

[본론]
아래와 같은 단계로 실제로 나누었고, 이를 오늘의 To Do 리스트에 세워서 진행을 하려 했다. 
## ✅ 기본 테스트
1. **단위 테스트(Unit Test)**
    - 기능의 최소 단위(메서드, 함수)가 올바르게 동작하는지 확인.
    - 신규 기능에 대한 happy path + edge case 포함.
2. **통합 테스트(Integration Test)**
    - 다른 모듈, 외부 API, DB와의 연동이 정상적으로 되는지 확인.
    - 신규 기능이 기존 로직과 충돌하지 않는지 검증.

---

## ✅ 운영 안정성을 위한 확장 테스트
1. **회귀 테스트(Regression Test)**
    - 신규 기능 추가로 기존 기능이 깨지지 않았는지 확인.
    - 자동화된 테스트 스위트 실행 필수.
2. **시스템/엔드투엔드(E2E) 테스트**
    - 실제 사용자 시나리오(로그인 → 기능 사용 → 로그아웃 등)를 따라가며 전체 플로우 검증.
    - 신규 기능이 기존 플로우에 영향을 주는지 확인.
3. **성능/부하 테스트(Performance & Load Test)**
    - 신규 기능이 높은 트래픽에서 병목이나 장애를 일으키지 않는지 측정.
    - 특히 DB 쿼리, 캐시, API 응답속도 확인.
4. **보안 테스트(Security Test)**
    - 입력값 검증(XSS, SQL Injection 등)
    - 인증/인가(권한 누락 여부)
    - 민감정보 노출 여부 점검.

---

## ✅ 운영 환경을 고려한 전략

1. **스테이징 환경 테스트**
    - 운영과 최대한 유사한 환경에서 테스트 진행.
    - 실제 운영 데이터와 유사한 테스트 데이터를 활용.
2. **카나리 배포 / 블루그린 배포**
    - 전체 사용자에게 배포하기 전에 일부 트래픽만 신규 기능으로 보내 모니터링.
    - 문제 발생 시 빠른 롤백 가능.
3. **모니터링 및 로깅 검증**
    - 신규 기능 배포 후 로그, 모니터링 지표, 알람 시스템이 정상적으로 잡히는지 확인.
    - 에러율, 응답시간, 자원 사용량 등을 관찰.



[결론]
- 실제 개발 단계에서 단위 테스트, 통합 테스트, 회귀테스트까지는 어느 정도 고려를 하며 개발하는 버릇이 잡혀가는 느낌이 든다. 
개발을 하며 테스트를 조금씩 생각하면서 진행하게 되었다. 회귀 테스트를 염두에 두어 기존에 사용하던 쿼리인지 먼저 확인하는 습관이 생겼고, 쿼리를 분리하는 습관이 생겼다.
- 이렇게 큰 테스트를 머리 속에 그려나가며 개발을 진행해나가니, 그 고려 사항이나 디테일들이 전체 큰 그림 안에서 노는 느낌이 들어 개발을 진행하며 사실 조금 희열을 느꼈다.
- 단위 테스트시
>> 예외 입력 값 처리 : 
* 해당 값이 빈 값일 수도 있으니, 무조건 해당 값이 NULL 이거나 빈 값인 것만 체크할 필요는 없다. 
- 테스트는 개발만큼 중요하다. 테스트를 오히려 먼저 큰 그림을 잡고나서, 그에 맞추어 개발하는 방식도 익혀두면 도움이 많이 될 것 같다.
