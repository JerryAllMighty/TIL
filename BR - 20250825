[서두]
- 개발을 하며 지속적으로 들었던 피드백 중, 나도 부족하다고 생각하고, 지속적으로 받았던 피드백 중에 하나는,
'코드를 보고 기존 기능을 분석하는 역량'이다
- 주문/결제/정산 등 기존의 기능이 복잡하다면, 
설상가상으로 만약 테스트 코드나 히스토리가 부재라면 역으로 추적해서 기능을 분석하고, 유추해 나갈 수 있어야한다. 
(참고로 나는 SI 회사에 재직 중이고, 테스트 코드를 단 한 번도 본 적도, 쓰는 것을 구경해 본 적도 없다. 늘 TDD를 경험해보고 싶어하고 있다.)
하지만 이러한 부분에서 부족하다는 평가를 받아와서, 나도 해당 능력을 키워야 전반적인 소프트웨어 역량이 올라갈 것이라 생각하고,
퇴근 후에 해당 역량 관련해서 어떠한 용어로 정의를 내리는지, 또 관련해서 책이 나온 것은 없는지 퇴근 후 몇시간을 뒤지고 다녔다.

[결론]
- 기존의 코드나 기능을 보고 역으로 원래 기능을 분석하고 역추적하는 역량은 리버스 엔지니어링이라고 정의되고 있다
- 관련 교재 참고
[코드 이해 & 유지보수]
Working Effectively with Legacy Code (Michael Feathers)
→ 레거시 코드에서 기능 의도를 파악하는 가장 유명한 책.
→ “이 코드가 왜 이렇게 되어 있지?”를 단계적으로 접근하는 방법을 알려줌.

Code Reading: The Open Source Perspective (Diomidis Spinellis)
→ 다른 사람이 작성한 실제 오픈소스 코드를 읽으며 코드 이해력을 키우는 실습 중심 책.
→ “코드를 어떻게 읽어야 하는가”에 집중.

[코드 구조 & 의도 파악]
Refactoring (Martin Fowler)
→ 코드의 구조를 해부하면서 의도를 파악하는 방법. “나쁜 냄새”를 찾아내는 눈을 길러줌.
Clean Code (Robert C. Martin)
→ 코드를 읽는 사람 입장에서 좋은/나쁜 코드 패턴을 배우게 됨. 역으로 남이 짠 코드에서 패턴을 빠르게 캐치하는 데 도움.

[시스템 차원 이해]
Fundamentals of Software Architecture (Mark Richards, Neal Ford)
→ 코드를 모듈/아키텍처 관점에서 이해하는 훈련. 큰 그림을 빨리 파악하는 능력을 줌.

Your Code as a Crime Scene (Adam Tornhill)
→ 코드베이스를 “범죄현장 조사”처럼 분석. Git 히스토리, 모듈 연결, 변경 패턴을 통해 코드의 의미와 의도를 파악하는 색다른 접근.
