[서두]
- 신규 기능 개발 오픈이 다가왔다. 예전에 한 번 이슈가 있었던 적이 있던 게(아래에 간략하게 경험담 적어놨다),
프론트/앱 개발은 API가 기존에 사용하던 것이 바뀌거나, 혹은 신규로 개발이 된다던가 식의 변경이 있다면
새로 스키마를 만들던가 식의 추가 개발이 이루어져야한다. (당연하다)
- 하지만 최종 반영시에 해당하는 부분이 문제가 없으려면 경우에 따라서는 프론트가 먼저 개발을 진행하고, 
어떨 때는 백엔드 API가 먼저 반영되어야하는 경우도 있다.
그래서 오늘은 해당하는 운영 배포 전략을 지칭하는 용어나 개념들은 어떤 것들이 있는지 조금 알아보고, 
실제 업무에 적용시킬 수 있는 건 또 어떤 게 있을지 한 번 정리해보려고한다.

> [이전 경험담 공유]
>> 7월달 기능 개발 후, 이슈가 생겨서 해당 회고록을 남겨놓았던 부분이 보인다. 가져왔다.
(디테일한 상황은 남겨놓지 않았네...)

# 운영 업무 시 기능 개발을 할 때
새로운 신규 기능 개발이면 모르지만, 기존의 기능을 변경하는 일이라면, 우선 가장 먼저 이 API를 따로 분리해서 추가하는 식으로 개발하자.
왜냐하면 기존의 API가 프론트와 같이 개발되어야하는 케이스가 많을텐데,
이런 케이스의 경우는 프론트의 개발건이 충분히 검증이나 테스트 완료되지 않은 상태에서 백엔드 API가 검증이나 운영에 반영될 요소가 있기 때문에,
또한 테스트가 덜 된 상태에서 다른 분의 개발이 긴급 반영을 해야하는 케이스 생기니, 꼭, 기능 개발을 할 때는 카나리아 배포를 우선 고려해보자.

>> 이 때 프론트 개발 반영 여부를 고려하지 않고 백엔드 반영 여부만 덜컥 OK를 해버려서 이런 사단이 나버렸다.
프론트는 미리 공유 못 드려서 죄송하다하고, 나는 프론트 개발 확인 못했으니 책임 소재를 물었다.
>> 그리고 지금 보니 카나리아 배포를 잘못 이해하고 적은 것 같다. 
일부 트래픽을 조정해서 일부에게만 새 버전을 사용하게 하는 것인데, 이 때 나는 잘못된 정보를 접해서 오해를 해서 적은 부분 같다.
내가 적은 부분은 백엔드와 프론트 배포 시점이 다를 때 서비스가 깨지지 않게하는 전략을 생각하는 것이었고,
>>> Backward Compatible Deployment (하위 호환 배포)
>>> API Versioning
>>> Graceful Migration (점진적 전환)
>>> Consumer-Driven Contracts
이 정도를 이해하고 적었으면 될 것 같다.....

>> 결론 : 오늘은 위 개념들을 좀 알아보도록 하자...

[본론]
> Backward Compatible Deployment (하위 호환 배포)
>> 새 API 추가 시, 기존 API도 유지해서 사용자(프론트/앱)가 깨지지 않게 함
>> 예시:
기존 API 응답:
{ "id": 1, "title": "event1" }
새 API는 description 필드가 추가됨:
{ "id": 1, "title": "event1", "description": "신규 설명" }
구버전 앱은 description을 무시해도 정상 동작 → 하위 호환 유지!

> API Versioning
>> URL(/v1, /v2), HTTP Header, Query Param 등으로 버전 구분.
신규 기능 추가/변형이 있으면 아예 새 API로 만들어 점진적 전환.
>> 예시
/api/v1/events → 기존 조회 API
/api/v2/events → 정렬 옵션 추가, 새로운 데이터 구조 지원
새 앱은 v2 사용, 구 앱은 v1 사용 → 점진적 전환 가능.

> Graceful Migration (점진적 전환)
>> 구버전에서 신버전으로 기능을 서서히 옮기는 방식.
>> 예시
로그인 로직을 OAuth2 기반으로 교체.
기존 세션 기반 로그인도 유지하면서, 새 앱 유저는 OAuth2 사용.
일정 기간 후 “세션 로그인 종료 예정” 공지 → 전환 완료 시 구버전 제거.

> Consumer-Driven Contracts
>> “프론트/앱이 먼저 쓸 수 있도록 계약(contract)을 유지한 채, 백엔드가 먼저 준비하는 전략” → 이걸 TDD처럼 관리하는 방법론도 있음.
>> 예시
프론트 개발자가 “이벤트 목록에서 discountRate 필드가 꼭 필요하다”고 정의.
백엔드는 해당 필드를 API에 추가하되, 아직 프론트는 개발 중. 먼저 백엔드 반영해도 괜찮음.
나중에 프론트가 배포되면 이미 백엔드가 준비되어 있어 바로 사용 가능.

[결론]
- 문제가 생기면 즉시 롤백할지, 
  아니면 점진적으로 반영을 진행할 것인지(이 점진적인 변환의 방법은 여러가지가 있다)
  백엔드나 프론트가 먼저 반영을 시도해도 괜찮다면 선반영을 시도할지
의 접근 방법으로 적절한 접근법을 먼저 생각한 후, 추후 프론트와 소통하며 개발 진행하면 수월하지 않을까. 
조금이라도 더...
