[서론]
- 오늘은 개발 작업을 진행하며 실제로 있었던 부하를 분석하고, 이를 줄이기 위해서
어떠한 계획을 세우면 좋을지 찾아보고 정리해보았다
- 상황은, 나는 현재 신규 이벤트 기능 개발을 진행 중이고, 
기존의 이벤트의 형태를 조금 참고는 하지만, 많은 부분을 새롭게 만들어서 개발을 진행 중이다.
- 실제로 이미 구현되어 있는 이벤트 기능들의 코드 형태와, 구현 로직 패턴 (이벤트 진행 상태 구분, 이벤트 관련 데이터 테이블 검색 패턴 등등)
등을 따라가려다보니 고민이되는 부분이 너무 많이 생겨 로드가 조금씩 걸렸고, 디자인 패턴적인 부분에서 그러한 부분이 많이 생겼다

[본론]
- 사용자단에서 보여줄 상태를 위해서 DTO를 따로 만든 것.
ex) 기존의 Event 객체가 있다면, 사용자 단에 보여주기 위해 다양한 정보들을 취합한 DTO인 EventStatus를 활용
- 해당 DTO를 또 따로 빼서 활용하려다보니, 
- Map 형태로 리턴되던 데이터들 
> 막상 호출되는 결과를 보니 프론트 입장에서 부모 자식 간의 테이블 관계를 파악하기 너무 어려워 이렇게 리턴되는 데이터가 사용하기 어렵지 않을까 고민했다
> 근데 막상 Map 형태로 리턴하려고 했던 부분도, 원래는 MyBatis에서 Collection을 사용하면 성능상 부족한 부분이 많을거라 생각되어 바꾼 부분인데, 막상 바꾸고 나니 또 문제가 보여 다시 고치는 과정을 반복했다
> 기존의 로직을 조금 더 세분화하여 나누어, 자식 테이블들과 손자 테이블들을 각각 DB에 다녀오는 방식으로 모두 짧게 나누었고, 루트 도메인에 해당하는 정보들을 Set 해주는 방식으로 개발을 진행하였다. 


[결론]
- 업무와 개인적인 고민 사이의 균형이 중요
가독성, 확장성, 개발의 편의 등을 고려해 뒷사람과 이걸 받아서 할 프론트를 고려해서 개발한다고 생각하고, 
- 디자인 패턴 등의 개발 철학은 깊이가 충분하다면 바로 적용하여 기존의 코드와 잘 융합이 되나, 충분하지 않다면 인지 과부하를 불러 올 수 있기에
적당한 깊이가 생기기 전까지는 확장성과 가독성, BFF를 생각하며 개발의 속도를 조금 더 가져가는 게 더 중요하다고 생각한다
개발에 대한 고민, 디자인 패턴에 대한 고민 등이 모두 필요한 부분이지만, 실무에서는 조금 조절하여 일을 일정내에 조금 더 잘 마무리할 수 있게 가져가는 것이 조금 더 우선순위가 높지 않나 생각했다
