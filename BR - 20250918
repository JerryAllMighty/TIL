[서론]
- 오늘은 개발 작업을 진행하며 실제로 있었던 부하를 분석하고, 이를 줄이기 위해서
어떠한 계획을 세우면 좋을지 찾아보고 정리해보았다
- 상황은, 나는 현재 신규 이벤트 기능 개발을 진행 중이고, 
기존의 이벤트의 형태를 조금 참고는 하지만, 많은 부분을 새롭게 만들어서 개발을 진행 중이다.
- 실제로 이미 구현되어 있는 이벤트 기능들의 코드 형태와, 구현 로직 패턴 (이벤트 진행 상태 구분, 이벤트 관련 데이터 테이블 검색 패턴 등등)
등을 따라가려다보니 고민이되는 부분이 너무 많이 생겨 로드가 조금씩 걸렸고, 디자인 패턴적인 부분에서 그러한 부분이 많이 생겼다

[본론]
- 사용자단에서 보여줄 상태를 위해서 DTO를 따로 만든 것.
ex) 기존의 Event 객체가 있다면, 사용자 단에 보여주기 위해 다양한 정보들을 취합한 DTO인 EventStatus를 활용
> 해당 DTO를 또 따로 빼서 활용하려다보니, 불필요한 Java 도메인 생성, Mapper 클래스 형성 등이 생기는 부분 같아, 관리요소가 늘어난다고 생각했다
> 기존의 도메인에 조회용 컬럼을 활용하는 부분도 한 방법이라 해당하는 부분을 선택했다

1. 리턴용 DTO를 만드는 경우
✅ 장점
관심사 분리 (Separation of Concerns)
도메인 모델은 비즈니스 로직 중심으로, DTO는 입출력(API 스펙)에 맞게 역할을 분리할 수 있음.
보안/노출 통제 용이
외부에 노출하지 않아야 할 내부 필드(password, internalStatus 등)를 DTO에서 제외할 수 있음.
API 변화 대응이 유연
프론트 요구사항에 따라 DTO 필드만 바꾸면 되고, 도메인 엔티티를 건드릴 필요 없음.
테스트 용이성
DTO는 단순 데이터 구조라 직관적이고, 직렬화/역직렬화 테스트에서 안정적.
ORM 종속성 제거
도메인 엔티티(JPA @Entity 등)를 그대로 내보내면 프록시, Lazy Loading 이슈가 터질 수 있는데, DTO로 변환하면 안전함.

❌ 단점
코드 중복
같은 데이터 구조라도 엔티티와 DTO 사이에 유사한 필드가 반복됨.
변환 비용
Entity → DTO 변환 로직이 필요 (MapStruct, ModelMapper, 직접 매핑 등).
개발 속도 저하
간단한 프로젝트에서는 DTO 만드는 게 과하다고 느껴질 수 있음.

2. 도메인 엔티티에 조회용 필드 붙여 활용하는 경우
✅ 장점
개발 단순화 / 속도
DTO 생성, 매핑 과정이 필요 없어서 빠르게 개발 가능.
코드 중복 감소
동일한 필드를 중복 정의하지 않음.
작은 프로젝트/내부용 서비스 적합
유지보수 부담이 적고 팀 규모가 작을 때 pragmatic한 선택.

❌ 단점
관심사 혼합
도메인 로직과 API 스펙이 한 클래스에 뒤섞임 → 유지보수 어려움.
불필요한 데이터 노출 위험
모든 필드가 그대로 직렬화되면 의도치 않게 내부 정보가 외부 API에 노출될 수 있음.
JPA Entity 직접 노출 문제
Lazy Loading, 양방향 연관관계 순환 참조 문제 등 직렬화 시 터질 수 있음.
확장성 저하
API 스펙 변경 시 도메인 자체를 건드려야 해서 영향 범위가 커짐.

> 나는 불필요한 클래스 생성과 변환 비용이 싫어서 기존의 도메인을 활용했지만, 아래와 같은 장단점을 한 번 알아두면 그래도 선택의 기준이 될 듯 하다




- Map 형태로 리턴되던 데이터들이 프론트와 API 연동이 쉽지 않을 것 같은 느낌
> 막상 호출되는 결과를 보니 프론트 입장에서 부모 자식 간의 테이블 관계를 파악하기 너무 어려워 이렇게 리턴되는 데이터가 사용하기 어렵지 않을까 고민했다
>> 부모 자식 간의 관계가 잡혀있지 않고, ROW 들이 주르륵 나오는 형태
> 근데 막상 Map 형태로 리턴하려고 했던 부분도, 원래는 MyBatis에서 Collection을 사용하면 성능상 부족한 부분이 많을거라 생각되어 바꾼 부분인데, 막상 바꾸고 나니 또 문제가 보여 다시 고치는 과정을 반복했다
> 기존의 로직을 조금 더 세분화하여 나누어, 자식 테이블들과 손자 테이블들을 각각 DB에 다녀오는 방식으로 모두 짧게 나누었고, 루트 도메인에 해당하는 정보들을 Set 해주는 방식으로 개발을 진행하였다. 


[결론]
- 업무와 개인적인 고민 사이의 균형이 중요
가독성, 확장성, 개발의 편의 등을 고려해 뒷사람과 이걸 받아서 할 프론트를 고려해서 개발한다고 생각하고, 
- 디자인 패턴 등의 개발 철학은 깊이가 충분하다면 바로 적용하여 기존의 코드와 잘 융합이 되나, 충분하지 않다면 인지 과부하를 불러 올 수 있기에
적당한 깊이가 생기기 전까지는 확장성과 가독성, BFF를 생각하며 개발의 속도를 조금 더 가져가는 게 더 중요하다고 생각한다
개발에 대한 고민, 디자인 패턴에 대한 고민 등이 모두 필요한 부분이지만, 실무에서는 조금 조절하여 일을 일정내에 조금 더 잘 마무리할 수 있게 가져가는 것이 조금 더 우선순위가 높지 않나 생각했다

- 확장성, 가독성, BFF
