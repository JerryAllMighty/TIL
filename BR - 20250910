[서두]
- 공통 코드로 관리하는 것, Java 단의 Code Type으로 관리하는 것,
둘 사이에서 고민했던 부분들이 있고, 오늘 해당 부분 수정한 부분이 있어서 공유한다.
어떠한 고민을 가지고 접근하고 결정을 내렸는지를 공유

[본론]
- 원래 신규 이벤트 등을 개발하면 특정 조건의 케이스 등을 유형으로 묶어서 관리해야하는 경우가 생긴다.
- 이런 케이스는 또 하위의 세부 케이스들로 나뉘어 개발을 진행할 떄 어떻게 관리를 할 것인가 고민하게 만든다
- 만약 해당 케이스가 변동성이 크다, 이후 변할 가능성이 높다면, 데이터로 관리를 진행하고, 공통 코드로 관리를 하면 변화에 유연하게 대처할 수 있다.
장점
변경 시 배포 없이 운영툴에서 수정 가능.
공통 기준이 있어 여러 시스템에서 일관성 유지.
데이터(코드)에 대한 이력 관리 가능.

단점
테이블 관리/캐싱/조회 쿼리 필요 → 성능 고려해야 함.
타입 안정성이 떨어짐 (문자열 코드 비교).
코드가 늘어나면 관리 복잡성 ↑.

- 만약 코드로 ENUM 등으로 관리를 진행한다면
장점
타입 안정성 (컴파일 타임 체크 가능).
비즈니스 로직에서 코드 잘못 쓸 가능성 ↓.

단점
변경하려면 코드 수정 + 빌드 + 배포 필요.
운영자가 직접 수정 불가.

[결론]
- 접근 포인트. 의사결정 기준
기준 |           공통 코드(DB/Config) /	Java Enum/상수
변경 주체 |	     운영자(기획/관리자)	 /  개발자
변경 주기 |	     자주 변동 (주간/월간)/  거의 없음
시스템 영향 |	  여러 시스템이 공유	  /   특정 서비스 로직 한정
타입 안정성 |	  문자열 기반, 런타임 오류 가능/	컴파일 타임 검증
배포 필요 여부 |	필요 없음	          /    필요함
